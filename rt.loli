;; def* forms of macro and lambda

(define defmacro
  (macro (name args & body)
    '(define ~name (macro ~args ~@body))))

(defmacro defn (name args & body)
  '(define ~name (lambda ~args ~@body)))

;; c[a|d]+r

(defn cadr (l) (car (cdr l)))
(defn cddr (l) (cdr (cdr l)))

;; assertion functions

(defn nil? (v) (= v ()))

;; let

(defn let-fn (bindings body)
  (cond
   ((nil? (cdr bindings))
    '((lambda (~(car (car bindings)))
        ~@body)
      ~(cadr (car bindings))))
   (true
    '((lambda (~(car (car bindings)))
        ~(let-fn (cdr bindings) body))
      ~(cadr (car bindings))))))

(defmacro let (bindings & body)
  (let-fn bindings body))

;; map/reduce

(defn map (f l)
  (foldl (lambda (acc e) (cons (f e) acc)) () l))

(defn filter (f l)
  (foldl (lambda (acc e)
           (cond ((f e) (cons e acc))
                 (true acc)))
         () l))

(defn reduce (f l & acc)
  (cond ((nil? acc) (foldr f (f (car l) (cadr l)) (cddr l)))
        (true (foldr f (car acc) l))))

;; testing

(define is
  (macro (form)
    '(cond ((not ~form)
            (print "Assertion failed:" (quote ~form))))))

;; Atomicity
(is (atom 31337))
(is (atom "ohai"))
(is (atom ()))
(is (not (atom '(1 3 3 7))))

;; Equality
(is (= 1 1))
(is (= 1 1337/1337))
(is (not (= 1 2)))
(is (= 1 1.0))
(is (not (= 1.0 1/1)))
(is (= "foo" "foo"))
(is (not (= "foo" "bar")))
(is (= '(1 2 3) '(1 2 3)))
(is (not (= '(1 2 3) '(1 2))))
(is (= () ()))
(is (= 'omg-a-symbol 'omg-a-symbol))
(is (not (= 'omg-a-symbol 'omg-another-symbol)))
(is (not (= 1337 "1337")))
(is (not (= 'symbol "symbol")))

;; Lists
(is (= 1 (car '(1 2 3))))
(is (= '(2 3) (cdr '(1 2 3))))
(is (= nil (car nil)))
(is (= nil (cdr nil)))
(is (= nil (cdr '(1337))))
(is (= '(1 2 3) (cons 1 '(2 3))))

;; Boolean logic
(is (and true true))
(is (not (and true false)))
(is (not (and false true)))
(is (not (and false false)))

(is (or true true))
(is (or true false))
(is (or false true))
(is (not (or false false)))

;; Numbers
(is (number? 5))
(is (number? 5.0))
(is (number? 5/6))

(is (int? 5))
(is (not (int? 5.0)))
(is (not (int? 5/6)))

(is (not (decimal? 5)))
(is (decimal? 5.0))
(is (not (decimal? 5/6)))

(is (not (fraction? 5)))
(is (not (fraction? 5.0)))
(is (fraction? 5/6))

(is (= 9 (+ 2 3 4)))
(is (= 9.5 (+ 2 3 4.5)))
(is (= 29/5 (+ 2 3 4/5)))
(is (= -5 (- 2 3 4)))
(is (= 24 (* 2 3 4)))
(is (= 5/6 (/ 2 3 4/5)))
(is (= 1/2 (rem 5/2 2)))

;; Reader macro characters
(is (= '(1 2 3) '(1 2 ~(+ 1 2))))
(is (= '(1 2 3) '(~@(quote (1 2 3)))))

;; Functions
(is (= 5 ((lambda (a b) (+ a b)) 2 3)))
(is (= 9 ((lambda (& nums) (apply + nums)) 2 3 4)))
(is (= 9 ((lambda (a & nums) (apply + (cons a nums))) 2 3 4)))
(defn test-defn (a & nums) (apply + (cons a nums)))
(is (= 9 (test-defn 2 3 4)))

;; Binding
(is (= 5 (let ((a 2) (b 3)) (+ a b))))
(is (= 6 (let ((a 2) (b (+ a 2))) (+ a b))))

;; Reducers
(is (= '(2 3 4) (map (lambda (n) (+ n 1)) '(1 2 3))))
(is (= '(2 4) (filter even? '(1 2 3 4))))
(is (= 6 (reduce + '(1 2 3))))

;; Strings
;; (is (= "ohai" (cons "o" "hai")))
;; (is (= "o" (car "ohai")))
;; (is (= "hai" (cdr "ohai")))

;; Scope
(defn test-partial (func arg1)
  (lambda (arg2) (+ arg1 arg2)))
(define test-add3 (test-partial + 3))
(is (= 5 (test-add3 2)))

(print "All tests done.")
